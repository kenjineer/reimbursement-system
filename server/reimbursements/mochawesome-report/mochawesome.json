{
  "stats": {
    "suites": 3,
    "tests": 30,
    "passes": 30,
    "pending": 0,
    "failures": 0,
    "start": "2021-02-04T08:53:04.257Z",
    "end": "2021-02-04T08:53:05.169Z",
    "duration": 912,
    "testsRegistered": 30,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "f6d56bac-860e-446c-9529-2a7d759e6d99",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "8111b2b8-9ac7-42d8-ac0e-5492e5820b56",
          "title": "Reimbursement API",
          "fullFile": "C:\\Users\\Ken\\Projects\\reimbursement-system\\reimbursement-system\\server\\reimbursements\\test\\reimbursementsTest.js",
          "file": "\\test\\reimbursementsTest.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "e4d06c15-ded6-4583-be03-b65d21d931a6",
              "title": "Authorized User",
              "fullFile": "C:\\Users\\Ken\\Projects\\reimbursement-system\\reimbursement-system\\server\\reimbursements\\test\\reimbursementsTest.js",
              "file": "\\test\\reimbursementsTest.js",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"Authorized User\"",
                  "fullTitle": "Reimbursement API Authorized User \"before all\" hook in \"Authorized User\"",
                  "timedOut": false,
                  "duration": 107,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const credentials = {\n\tusername: '0902191173',\n\tpassword: 'kenken',\n};\nchai.request(loginServerUrl)\n\t.post('/api/v1/login')\n\t.send(credentials)\n\t.end((err, res) => {\n\t\tif (err) {\n\t\t\tconsole.log(err);\n\t\t} else {\n\t\t\tjwtEmp = res.body.jwt.token;\n\t\t}\n\t\tdone();\n\t});",
                  "err": {},
                  "uuid": "07f28274-a01e-401c-b204-e4d41c8ca3bf",
                  "parentUUID": "e4d06c15-ded6-4583-be03-b65d21d931a6",
                  "isHook": true,
                  "skipped": false
                },
                {
                  "title": "\"before all\" hook in \"Authorized User\"",
                  "fullTitle": "Reimbursement API Authorized User \"before all\" hook in \"Authorized User\"",
                  "timedOut": false,
                  "duration": 84,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const credentials = {\n\tusername: 'bert',\n\tpassword: 'bert',\n};\nchai.request(loginServerUrl)\n\t.post('/api/v1/login')\n\t.send(credentials)\n\t.end((err, res) => {\n\t\tif (err) {\n\t\t\tconsole.log(err);\n\t\t} else {\n\t\t\tjwtMgr = res.body.jwt.token;\n\t\t}\n\t\tdone();\n\t});",
                  "err": {},
                  "uuid": "c4ce1e6e-d5fb-4e9c-b085-de65b4563c1b",
                  "parentUUID": "e4d06c15-ded6-4583-be03-b65d21d931a6",
                  "isHook": true,
                  "skipped": false
                },
                {
                  "title": "\"before all\" hook in \"Authorized User\"",
                  "fullTitle": "Reimbursement API Authorized User \"before all\" hook in \"Authorized User\"",
                  "timedOut": false,
                  "duration": 83,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const credentials = {\n\tusername: 'eunice',\n\tpassword: 'yuniyuni',\n};\nchai.request(loginServerUrl)\n\t.post('/api/v1/login')\n\t.send(credentials)\n\t.end((err, res) => {\n\t\tif (err) {\n\t\t\tconsole.log(err);\n\t\t} else {\n\t\t\tjwtFin = res.body.jwt.token;\n\t\t}\n\t\tdone();\n\t});",
                  "err": {},
                  "uuid": "bf5433dd-35c9-42c1-bdac-258aa53ce6c0",
                  "parentUUID": "e4d06c15-ded6-4583-be03-b65d21d931a6",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "It should GET user reimbursements when user is authorized as employee.",
                  "fullTitle": "Reimbursement API Authorized User It should GET user reimbursements when user is authorized as employee.",
                  "timedOut": false,
                  "duration": 51,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const authority = 0;\nconst data = {\n\treimbursements: [\n\t\t{\n\t\t\t_reimbursementId: 1,\n\t\t\temployeeName: 'Kenneth Caro Karamihan',\n\t\t\t_categoryId: 9,\n\t\t\tcategoryName: 'Travel',\n\t\t\tpurpose: 'Sample Purpose 1',\n\t\t\ttotalCost: '1500.50',\n\t\t\tplannedDate: new Date('2021-01-29 12:00:00').toISOString(),\n\t\t\tstatus: 3,\n\t\t\tapprovalDate: new Date('2021-01-29 11:48:37').toISOString(),\n\t\t\trejectionDate: null,\n\t\t\treleaseDate: new Date('2021-01-29 11:52:33').toISOString(),\n\t\t\tremarks: 'Sample Remarks',\n\t\t\tcreatedDate: new Date('2021-01-29 11:45:16').toISOString(),\n\t\t},\n\t\t{\n\t\t\t_reimbursementId: 2,\n\t\t\temployeeName: 'Kenneth Caro Karamihan',\n\t\t\t_categoryId: 8,\n\t\t\tcategoryName: 'Rent or Lease',\n\t\t\tpurpose: 'Sample Purpose 2',\n\t\t\ttotalCost: '1500.00',\n\t\t\tplannedDate: new Date('2021-02-01 12:00:00').toISOString(),\n\t\t\tstatus: 0,\n\t\t\tapprovalDate: null,\n\t\t\trejectionDate: new Date('2021-01-29 11:50:20').toISOString(),\n\t\t\treleaseDate: null,\n\t\t\tremarks: 'Sample Remarks',\n\t\t\tcreatedDate: new Date('2021-01-29 11:46:16').toISOString(),\n\t\t},\n\t\t{\n\t\t\t_reimbursementId: 3,\n\t\t\temployeeName: 'Kenneth Caro Karamihan',\n\t\t\t_categoryId: 10,\n\t\t\tcategoryName: 'Utilities',\n\t\t\tpurpose: 'Sample Purpose 3',\n\t\t\ttotalCost: '790.50',\n\t\t\tplannedDate: new Date('2021-02-02 12:00:00').toISOString(),\n\t\t\tstatus: 1,\n\t\t\tapprovalDate: null,\n\t\t\trejectionDate: null,\n\t\t\treleaseDate: null,\n\t\t\tremarks: 'Sample Remarks',\n\t\t\tcreatedDate: new Date('2021-01-29 11:48:03').toISOString(),\n\t\t},\n\t],\n};\nchai.request(reimbursementsServer)\n\t.get(`/api/v1/reimbursements/user/${authority}`)\n\t.set('Authorization', jwtEmp)\n\t.end((err, res) => {\n\t\tres.should.have.status(200);\n\t\tres.body.should.be.eql(data);\n\t\tdone();\n\t});",
                  "err": {},
                  "uuid": "c3197c6b-3a75-4219-a658-27c4875fe123",
                  "parentUUID": "e4d06c15-ded6-4583-be03-b65d21d931a6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "It should GET user reimbursements when user is authorized as manager.",
                  "fullTitle": "Reimbursement API Authorized User It should GET user reimbursements when user is authorized as manager.",
                  "timedOut": false,
                  "duration": 12,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const authority = 1;\nconst data = {\n\treimbursements: [\n\t\t{\n\t\t\t_reimbursementId: 1,\n\t\t\temployeeName: 'Kenneth Caro Karamihan',\n\t\t\t_categoryId: 9,\n\t\t\tcategoryName: 'Travel',\n\t\t\tpurpose: 'Sample Purpose 1',\n\t\t\ttotalCost: '1500.50',\n\t\t\tplannedDate: new Date('2021-01-29 12:00:00').toISOString(),\n\t\t\tstatus: 3,\n\t\t\tapprovalDate: new Date('2021-01-29 11:48:37').toISOString(),\n\t\t\trejectionDate: null,\n\t\t\treleaseDate: new Date('2021-01-29 11:52:33').toISOString(),\n\t\t\tremarks: 'Sample Remarks',\n\t\t\tcreatedDate: new Date('2021-01-29 11:45:16').toISOString(),\n\t\t},\n\t\t{\n\t\t\t_reimbursementId: 2,\n\t\t\temployeeName: 'Kenneth Caro Karamihan',\n\t\t\t_categoryId: 8,\n\t\t\tcategoryName: 'Rent or Lease',\n\t\t\tpurpose: 'Sample Purpose 2',\n\t\t\ttotalCost: '1500.00',\n\t\t\tplannedDate: new Date('2021-02-01 12:00:00').toISOString(),\n\t\t\tstatus: 0,\n\t\t\tapprovalDate: null,\n\t\t\trejectionDate: new Date('2021-01-29 11:50:20').toISOString(),\n\t\t\treleaseDate: null,\n\t\t\tremarks: 'Sample Remarks',\n\t\t\tcreatedDate: new Date('2021-01-29 11:46:16').toISOString(),\n\t\t},\n\t\t{\n\t\t\t_reimbursementId: 3,\n\t\t\temployeeName: 'Kenneth Caro Karamihan',\n\t\t\t_categoryId: 10,\n\t\t\tcategoryName: 'Utilities',\n\t\t\tpurpose: 'Sample Purpose 3',\n\t\t\ttotalCost: '790.50',\n\t\t\tplannedDate: new Date('2021-02-02 12:00:00').toISOString(),\n\t\t\tstatus: 1,\n\t\t\tapprovalDate: null,\n\t\t\trejectionDate: null,\n\t\t\treleaseDate: null,\n\t\t\tremarks: 'Sample Remarks',\n\t\t\tcreatedDate: new Date('2021-01-29 11:48:03').toISOString(),\n\t\t},\n\t],\n};\nchai.request(reimbursementsServer)\n\t.get(`/api/v1/reimbursements/user/${authority}`)\n\t.set('Authorization', jwtMgr)\n\t.end((err, res) => {\n\t\tres.should.have.status(200);\n\t\tres.body.should.be.eql(data);\n\t\tdone();\n\t});",
                  "err": {},
                  "uuid": "089ad953-3ed0-4de4-99b2-5bf75601a44c",
                  "parentUUID": "e4d06c15-ded6-4583-be03-b65d21d931a6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "It should GET user reimbursements when user is authorized as finance officer.",
                  "fullTitle": "Reimbursement API Authorized User It should GET user reimbursements when user is authorized as finance officer.",
                  "timedOut": false,
                  "duration": 12,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const authority = 2;\nconst data = {\n\treimbursements: [\n\t\t{\n\t\t\t_reimbursementId: 1,\n\t\t\temployeeName: 'Kenneth Caro Karamihan',\n\t\t\t_categoryId: 9,\n\t\t\tcategoryName: 'Travel',\n\t\t\tpurpose: 'Sample Purpose 1',\n\t\t\ttotalCost: '1500.50',\n\t\t\tplannedDate: new Date('2021-01-29 12:00:00').toISOString(),\n\t\t\tstatus: 3,\n\t\t\tapprovalDate: new Date('2021-01-29 11:48:37').toISOString(),\n\t\t\trejectionDate: null,\n\t\t\treleaseDate: new Date('2021-01-29 11:52:33').toISOString(),\n\t\t\tremarks: 'Sample Remarks',\n\t\t\tcreatedDate: new Date('2021-01-29 11:45:16').toISOString(),\n\t\t},\n\t],\n};\nchai.request(reimbursementsServer)\n\t.get(`/api/v1/reimbursements/user/${authority}`)\n\t.set('Authorization', jwtFin)\n\t.end((err, res) => {\n\t\tres.should.have.status(200);\n\t\tres.body.should.be.eql(data);\n\t\tdone();\n\t});",
                  "err": {},
                  "uuid": "a7b4ac66-8eec-4e22-a2e5-649fcfecdd13",
                  "parentUUID": "e4d06c15-ded6-4583-be03-b65d21d931a6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "It should NOT GET user reimbursements when user is authorized with invalid authority.",
                  "fullTitle": "Reimbursement API Authorized User It should NOT GET user reimbursements when user is authorized with invalid authority.",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const authority = 1;\nchai.request(reimbursementsServer)\n\t.get(`/api/v1/reimbursements/user/${authority}`)\n\t.set('Authorization', jwtEmp)\n\t.end((err, res) => {\n\t\tconst error_message = 'Unauthorized! User authority level not recognized.';\n\t\tres.should.have.status(401);\n\t\tres.body.error_message.should.be.eql(error_message);\n\t\tdone();\n\t});",
                  "err": {},
                  "uuid": "4a8a1fb0-c4bd-4035-b754-e7a76d529bbe",
                  "parentUUID": "e4d06c15-ded6-4583-be03-b65d21d931a6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "It should GET user reimbursement items when user is authorized.",
                  "fullTitle": "Reimbursement API Authorized User It should GET user reimbursement items when user is authorized.",
                  "timedOut": false,
                  "duration": 10,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const _reimbursementId = 1;\nconst data = {\n\trmbItems: [\n\t\t{\n\t\t\t_itemId: 1,\n\t\t\titem: 'Sample Item 1',\n\t\t\tqty: 1,\n\t\t\tcost: '1000.00',\n\t\t},\n\t\t{\n\t\t\t_itemId: 2,\n\t\t\titem: 'Sample Item 2',\n\t\t\tqty: 2,\n\t\t\tcost: '250.25',\n\t\t},\n\t],\n};\nchai.request(reimbursementsServer)\n\t.get(`/api/v1/reimbursements/${_reimbursementId}/items`)\n\t.set('Authorization', jwtEmp)\n\t.end((err, res) => {\n\t\tres.should.have.status(200);\n\t\tres.body.should.be.eql(data);\n\t\tdone();\n\t});",
                  "err": {},
                  "uuid": "53b853ff-1ce3-421c-9fa1-62636e63777f",
                  "parentUUID": "e4d06c15-ded6-4583-be03-b65d21d931a6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "It should GET user reimbursement receipts when user is authorized.",
                  "fullTitle": "Reimbursement API Authorized User It should GET user reimbursement receipts when user is authorized.",
                  "timedOut": false,
                  "duration": 130,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const _reimbursementId = 1;\nconst data = {\n\t_receiptId: 1,\n\ttype: 'image/jpg',\n\tfileName: '1611891916362_rtsph_Gas Receipt.jpg',\n};\nchai.request(reimbursementsServer)\n\t.get(`/api/v1/reimbursements/${_reimbursementId}/receipts`)\n\t.set('Authorization', jwtEmp)\n\t.end((err, res) => {\n\t\tres.should.have.status(200);\n\t\tres.body.rmbReceipts[0]._receiptId.should.be.eql(data._receiptId);\n\t\tres.body.rmbReceipts[0].type.should.be.eql(data.type);\n\t\tres.body.rmbReceipts[0].fileName.should.be.eql(data.fileName);\n\t\tres.body.rmbReceipts[0].image.should.be.an('object');\n\t\tdone();\n\t});",
                  "err": {},
                  "uuid": "3e3dd846-fd3d-4d24-9d27-5cc5088f16fe",
                  "parentUUID": "e4d06c15-ded6-4583-be03-b65d21d931a6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "It should GET category list when user is authorized.",
                  "fullTitle": "Reimbursement API Authorized User It should GET category list when user is authorized.",
                  "timedOut": false,
                  "duration": 8,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const data = {\n\trmbCategories: [\n\t\t{\n\t\t\t_categoryId: 1,\n\t\t\tcategoryName: 'Advertising',\n\t\t},\n\t\t{\n\t\t\t_categoryId: 2,\n\t\t\tcategoryName: 'Car & Truck Expenses',\n\t\t},\n\t\t{\n\t\t\t_categoryId: 3,\n\t\t\tcategoryName: 'Contractors',\n\t\t},\n\t\t{\n\t\t\t_categoryId: 4,\n\t\t\tcategoryName: 'Education & Training',\n\t\t},\n\t\t{\n\t\t\t_categoryId: 5,\n\t\t\tcategoryName: 'Employee Benefits',\n\t\t},\n\t\t{\n\t\t\t_categoryId: 6,\n\t\t\tcategoryName: 'Meals & Entertainment',\n\t\t},\n\t\t{\n\t\t\t_categoryId: 7,\n\t\t\tcategoryName: 'Office Expenses & Postage',\n\t\t},\n\t\t{\n\t\t\t_categoryId: 8,\n\t\t\tcategoryName: 'Rent or Lease',\n\t\t},\n\t\t{\n\t\t\t_categoryId: 9,\n\t\t\tcategoryName: 'Travel',\n\t\t},\n\t\t{\n\t\t\t_categoryId: 10,\n\t\t\tcategoryName: 'Utilities',\n\t\t},\n\t],\n};\nchai.request(reimbursementsServer)\n\t.get('/api/v1/reimbursements/categories')\n\t.set('Authorization', jwtEmp)\n\t.end((err, res) => {\n\t\tres.should.have.status(200);\n\t\tres.body.should.be.eql(data);\n\t\tdone();\n\t});",
                  "err": {},
                  "uuid": "80d013e9-ac0d-4f5f-8f55-e0355f6a2e59",
                  "parentUUID": "e4d06c15-ded6-4583-be03-b65d21d931a6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "It should POST new user reimbursement when user is authorized.",
                  "fullTitle": "Reimbursement API Authorized User It should POST new user reimbursement when user is authorized.",
                  "timedOut": false,
                  "duration": 68,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const data = {\n\tnewReimbursement: {\n\t\t_categoryId: 9,\n\t\tpurpose: 'Fetch AWS Laptop',\n\t\ttotalCost: '1300.00',\n\t\tplannedDate: '2021-04-26 04:00:00',\n\t\tremarks: '行ってきます',\n\t},\n\tnewItems: [\n\t\t{\n\t\t\titem: 'Gas',\n\t\t\tqty: 1,\n\t\t\tcost: '1000.00',\n\t\t},\n\t\t{\n\t\t\titem: 'Toll Fee',\n\t\t\tqty: 2,\n\t\t\tcost: '150.00',\n\t\t},\n\t],\n};\nconst gas = fs.readFileSync(path.join(__dirname, 'img', 'Gas Receipt.jpg'));\nconst toll = fs.readFileSync(path.join(__dirname, 'img', 'Toll Receipt.jpg'));\nchai.request(reimbursementsServer)\n\t.post('/api/v1/reimbursements/new')\n\t.set('Authorization', jwtEmp)\n\t.field('Content-Type', 'multipart/form-data')\n\t.field('data', JSON.stringify(data))\n\t.attach('files', gas, 'Gas Receipt.jpg')\n\t.attach('files', toll, 'Toll Receipt.jpg')\n\t.end((err, res) => {\n\t\tres.should.have.status(200);\n\t\tdone();\n\t});",
                  "err": {},
                  "uuid": "ea965376-5966-4017-8eff-ec3b815d6677",
                  "parentUUID": "e4d06c15-ded6-4583-be03-b65d21d931a6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "It should PUT user reimbursement when user is authorized.",
                  "fullTitle": "Reimbursement API Authorized User It should PUT user reimbursement when user is authorized.",
                  "timedOut": false,
                  "duration": 43,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const _reimbursementId = 4;\nconst data = {\n\tupdatedReimbursement: {\n\t\t_categoryId: 6,\n\t\tpurpose: 'Lunch Meeting',\n\t\ttotalCost: '450.75',\n\t\tplannedDate: '2021-04-25 04:00:00',\n\t\tremarks: '食べましょう',\n\t},\n\tupdatedItems: [\n\t\t{\n\t\t\t_itemId: 6,\n\t\t\titem: 'Food',\n\t\t\tqty: 3,\n\t\t\tcost: '100.00',\n\t\t\tisNew: 0,\n\t\t\tisRemove: 0,\n\t\t},\n\t\t{\n\t\t\t_itemId: 7,\n\t\t\titem: 'Toll Fee',\n\t\t\tqty: 2,\n\t\t\tcost: '150.00',\n\t\t\tisNew: 0,\n\t\t\tisRemove: 1,\n\t\t},\n\t\t{\n\t\t\titem: 'Drinks',\n\t\t\tqty: 2,\n\t\t\tcost: '50.25',\n\t\t\tisNew: 1,\n\t\t\tisRemove: 0,\n\t\t},\n\t],\n\tdeletedReceipts: [5, 6],\n};\nconst food = fs.readFileSync(path.join(__dirname, 'img', 'Food Receipt.jpg'));\nconst rent = fs.readFileSync(path.join(__dirname, 'img', 'Drinks Receipt.jpg'));\nchai.request(reimbursementsServer)\n\t.put(`/api/v1/reimbursements/${_reimbursementId}`)\n\t.set('Authorization', jwtEmp)\n\t.field('Content-Type', 'multipart/form-data')\n\t.field('data', JSON.stringify(data))\n\t.attach('files', food, 'Food Receipt.jpg')\n\t.attach('files', rent, 'Rent Receipt.jpg')\n\t.end((err, res) => {\n\t\tres.should.have.status(200);\n\t\tdone();\n\t});",
                  "err": {},
                  "uuid": "d793c94b-96a6-42cc-9455-b1398c05afda",
                  "parentUUID": "e4d06c15-ded6-4583-be03-b65d21d931a6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "It should DELETE selected user reimbursement item when user is authorized.",
                  "fullTitle": "Reimbursement API Authorized User It should DELETE selected user reimbursement item when user is authorized.",
                  "timedOut": false,
                  "duration": 8,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const _reimbursementId = 4;\nconst _itemId = 6;\nchai.request(reimbursementsServer)\n\t.delete(`/api/v1/reimbursements/${_reimbursementId}/items/${_itemId}`)\n\t.set('Authorization', jwtEmp)\n\t.end((err, res) => {\n\t\tres.should.have.status(200);\n\t\tdone();\n\t});",
                  "err": {},
                  "uuid": "a06a84a3-bb23-4e8c-9153-6889e70d1e84",
                  "parentUUID": "e4d06c15-ded6-4583-be03-b65d21d931a6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "It should DELETE selected user reimbursement receipts when user is authorized.",
                  "fullTitle": "Reimbursement API Authorized User It should DELETE selected user reimbursement receipts when user is authorized.",
                  "timedOut": false,
                  "duration": 7,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const _reimbursementId = 4;\nconst _receiptId = 7;\nchai.request(reimbursementsServer)\n\t.delete(`/api/v1/reimbursements/${_reimbursementId}/receipts/${_receiptId}`)\n\t.set('Authorization', jwtEmp)\n\t.end((err, res) => {\n\t\tres.should.have.status(200);\n\t\tdone();\n\t});",
                  "err": {},
                  "uuid": "9425fd5d-d98b-4d8e-b2ce-5311cb4f67c0",
                  "parentUUID": "e4d06c15-ded6-4583-be03-b65d21d931a6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "It should DELETE selected user reimbursement for cancellation when user is authorized.",
                  "fullTitle": "Reimbursement API Authorized User It should DELETE selected user reimbursement for cancellation when user is authorized.",
                  "timedOut": false,
                  "duration": 14,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const _reimbursementId = 4;\nchai.request(reimbursementsServer)\n\t.delete(`/api/v1/reimbursements/${_reimbursementId}`)\n\t.set('Authorization', jwtEmp)\n\t.end((err, res) => {\n\t\tres.should.have.status(200);\n\t\tdone();\n\t});",
                  "err": {},
                  "uuid": "92e90b43-a7d7-4e94-9244-7433e3d00fcc",
                  "parentUUID": "e4d06c15-ded6-4583-be03-b65d21d931a6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "It should PUT selected user reimbursement's status to approved when user is authorized.",
                  "fullTitle": "Reimbursement API Authorized User It should PUT selected user reimbursement's status to approved when user is authorized.",
                  "timedOut": false,
                  "duration": 32,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "sinon.stub(axios, 'post').resolves(Promise.resolve());\nconst _reimbursementId = 3;\nconst statusFlag = 2;\nconst data = {\n\tremarks: 'Sample Remarks Approved',\n};\nchai.request(reimbursementsServer)\n\t.put(`/api/v1/reimbursements/${_reimbursementId}/status/${statusFlag}`)\n\t.set('Authorization', jwtEmp)\n\t.send(data)\n\t.end((err, res) => {\n\t\tres.should.have.status(200);\n\t\tdone();\n\t});",
                  "err": {},
                  "uuid": "d39e72a7-7d9f-4d40-8eac-c2b87da4a067",
                  "parentUUID": "e4d06c15-ded6-4583-be03-b65d21d931a6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "It should PUT selected user reimbursement's status to rejected when user is authorized.",
                  "fullTitle": "Reimbursement API Authorized User It should PUT selected user reimbursement's status to rejected when user is authorized.",
                  "timedOut": false,
                  "duration": 9,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const _reimbursementId = 3;\nconst statusFlag = 0;\nconst data = {\n\tremarks: 'Sample Remarks Rejected',\n};\nchai.request(reimbursementsServer)\n\t.put(`/api/v1/reimbursements/${_reimbursementId}/status/${statusFlag}`)\n\t.set('Authorization', jwtEmp)\n\t.send(data)\n\t.end((err, res) => {\n\t\tres.should.have.status(200);\n\t\tdone();\n\t});",
                  "err": {},
                  "uuid": "9248886d-b8ad-488c-8fde-e97dbbb376e1",
                  "parentUUID": "e4d06c15-ded6-4583-be03-b65d21d931a6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "It should PUT selected user reimbursement's status to released when user is authorized.",
                  "fullTitle": "Reimbursement API Authorized User It should PUT selected user reimbursement's status to released when user is authorized.",
                  "timedOut": false,
                  "duration": 7,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const _reimbursementId = 3;\nconst statusFlag = 3;\nconst data = {\n\tremarks: 'Sample Remarks Released',\n};\nchai.request(reimbursementsServer)\n\t.put(`/api/v1/reimbursements/${_reimbursementId}/status/${statusFlag}`)\n\t.set('Authorization', jwtEmp)\n\t.send(data)\n\t.end((err, res) => {\n\t\tres.should.have.status(200);\n\t\tsinon.restore();\n\t\tdone();\n\t});",
                  "err": {},
                  "uuid": "cb13f439-e895-41c8-8a73-c311505c4159",
                  "parentUUID": "e4d06c15-ded6-4583-be03-b65d21d931a6",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c3197c6b-3a75-4219-a658-27c4875fe123",
                "089ad953-3ed0-4de4-99b2-5bf75601a44c",
                "a7b4ac66-8eec-4e22-a2e5-649fcfecdd13",
                "4a8a1fb0-c4bd-4035-b754-e7a76d529bbe",
                "53b853ff-1ce3-421c-9fa1-62636e63777f",
                "3e3dd846-fd3d-4d24-9d27-5cc5088f16fe",
                "80d013e9-ac0d-4f5f-8f55-e0355f6a2e59",
                "ea965376-5966-4017-8eff-ec3b815d6677",
                "d793c94b-96a6-42cc-9455-b1398c05afda",
                "a06a84a3-bb23-4e8c-9153-6889e70d1e84",
                "9425fd5d-d98b-4d8e-b2ce-5311cb4f67c0",
                "92e90b43-a7d7-4e94-9244-7433e3d00fcc",
                "d39e72a7-7d9f-4d40-8eac-c2b87da4a067",
                "9248886d-b8ad-488c-8fde-e97dbbb376e1",
                "cb13f439-e895-41c8-8a73-c311505c4159"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 416,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "81b6d0e8-1ffc-46ce-8522-539087ff7651",
              "title": "Unauthorized User",
              "fullFile": "C:\\Users\\Ken\\Projects\\reimbursement-system\\reimbursement-system\\server\\reimbursements\\test\\reimbursementsTest.js",
              "file": "\\test\\reimbursementsTest.js",
              "beforeHooks": [
                {
                  "title": "\"before each\" hook in \"Unauthorized User\"",
                  "fullTitle": "Reimbursement API Unauthorized User \"before each\" hook in \"Unauthorized User\"",
                  "timedOut": false,
                  "duration": 6,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const credentials = {\n\tusername: '902191173',\n\tpassword: 'incorrect',\n};\nchai.request(loginServerUrl)\n\t.post('/api/v1/login')\n\t.send(credentials)\n\t.end((err, res) => {\n\t\tif (err) {\n\t\t\tconsole.log(err);\n\t\t} else {\n\t\t\tjwtEmp = res.body.jwt.token;\n\t\t}\n\t\tdone();\n\t});",
                  "err": {},
                  "uuid": "cae32dd5-1de7-44ee-be01-a278c8017a1e",
                  "parentUUID": "81b6d0e8-1ffc-46ce-8522-539087ff7651",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "It should NOT GET user reimbursements when user is unauthorized as employee.",
                  "fullTitle": "Reimbursement API Unauthorized User It should NOT GET user reimbursements when user is unauthorized as employee.",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const authority = 0;\nconst data = {\n\treimbursements: [\n\t\t{\n\t\t\t_reimbursementId: 1,\n\t\t\temployeeName: 'Kenneth Caro Karamihan',\n\t\t\t_categoryId: 9,\n\t\t\tcategoryName: 'Travel',\n\t\t\tpurpose: 'Sample Purpose 1',\n\t\t\ttotalCost: '1500.50',\n\t\t\tplannedDate: new Date('2021-01-29 12:00:00').toISOString(),\n\t\t\tstatus: 3,\n\t\t\tapprovalDate: new Date('2021-01-29 11:48:37').toISOString(),\n\t\t\trejectionDate: null,\n\t\t\treleaseDate: new Date('2021-01-29 11:52:33').toISOString(),\n\t\t\tremarks: 'Sample Remarks',\n\t\t\tcreatedDate: new Date('2021-01-29 11:45:16').toISOString(),\n\t\t},\n\t\t{\n\t\t\t_reimbursementId: 2,\n\t\t\temployeeName: 'Kenneth Caro Karamihan',\n\t\t\t_categoryId: 8,\n\t\t\tcategoryName: 'Rent or Lease',\n\t\t\tpurpose: 'Sample Purpose 2',\n\t\t\ttotalCost: '1500.00',\n\t\t\tplannedDate: new Date('2021-02-01 12:00:00').toISOString(),\n\t\t\tstatus: 0,\n\t\t\tapprovalDate: null,\n\t\t\trejectionDate: new Date('2021-01-29 11:50:20').toISOString(),\n\t\t\treleaseDate: null,\n\t\t\tremarks: 'Sample Remarks',\n\t\t\tcreatedDate: new Date('2021-01-29 11:46:16').toISOString(),\n\t\t},\n\t\t{\n\t\t\t_reimbursementId: 3,\n\t\t\temployeeName: 'Kenneth Caro Karamihan',\n\t\t\t_categoryId: 10,\n\t\t\tcategoryName: 'Utilities',\n\t\t\tpurpose: 'Sample Purpose 3',\n\t\t\ttotalCost: '790.50',\n\t\t\tplannedDate: new Date('2021-02-02 12:00:00').toISOString(),\n\t\t\tstatus: 1,\n\t\t\tapprovalDate: null,\n\t\t\trejectionDate: null,\n\t\t\treleaseDate: null,\n\t\t\tremarks: 'Sample Remarks',\n\t\t\tcreatedDate: new Date('2021-01-29 11:48:03').toISOString(),\n\t\t},\n\t],\n};\nchai.request(reimbursementsServer)\n\t.get(`/api/v1/reimbursements/user/${authority}`)\n\t.set('Authorization', jwtEmp || '')\n\t.end((err, res) => {\n\t\tres.should.have.status(401);\n\t\tres.body.should.not.be.eql(data);\n\t\tdone();\n\t});",
                  "err": {},
                  "uuid": "560b5d68-d297-49f7-9055-b0c17696e82d",
                  "parentUUID": "81b6d0e8-1ffc-46ce-8522-539087ff7651",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "It should NOT GET user reimbursements when user is unauthorized as manager.",
                  "fullTitle": "Reimbursement API Unauthorized User It should NOT GET user reimbursements when user is unauthorized as manager.",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const authority = 1;\nconst data = {\n\treimbursements: [\n\t\t{\n\t\t\t_reimbursementId: 1,\n\t\t\temployeeName: 'Kenneth Caro Karamihan',\n\t\t\t_categoryId: 9,\n\t\t\tcategoryName: 'Travel',\n\t\t\tpurpose: 'Sample Purpose 1',\n\t\t\ttotalCost: '1500.50',\n\t\t\tplannedDate: new Date('2021-01-29 12:00:00').toISOString(),\n\t\t\tstatus: 3,\n\t\t\tapprovalDate: new Date('2021-01-29 11:48:37').toISOString(),\n\t\t\trejectionDate: null,\n\t\t\treleaseDate: new Date('2021-01-29 11:52:33').toISOString(),\n\t\t\tremarks: 'Sample Remarks',\n\t\t\tcreatedDate: new Date('2021-01-29 11:45:16').toISOString(),\n\t\t},\n\t\t{\n\t\t\t_reimbursementId: 2,\n\t\t\temployeeName: 'Kenneth Caro Karamihan',\n\t\t\t_categoryId: 8,\n\t\t\tcategoryName: 'Rent or Lease',\n\t\t\tpurpose: 'Sample Purpose 2',\n\t\t\ttotalCost: '1500.00',\n\t\t\tplannedDate: new Date('2021-02-01 12:00:00').toISOString(),\n\t\t\tstatus: 0,\n\t\t\tapprovalDate: null,\n\t\t\trejectionDate: new Date('2021-01-29 11:50:20').toISOString(),\n\t\t\treleaseDate: null,\n\t\t\tremarks: 'Sample Remarks',\n\t\t\tcreatedDate: new Date('2021-01-29 11:46:16').toISOString(),\n\t\t},\n\t\t{\n\t\t\t_reimbursementId: 3,\n\t\t\temployeeName: 'Kenneth Caro Karamihan',\n\t\t\t_categoryId: 10,\n\t\t\tcategoryName: 'Utilities',\n\t\t\tpurpose: 'Sample Purpose 3',\n\t\t\ttotalCost: '790.50',\n\t\t\tplannedDate: new Date('2021-02-02 12:00:00').toISOString(),\n\t\t\tstatus: 1,\n\t\t\tapprovalDate: null,\n\t\t\trejectionDate: null,\n\t\t\treleaseDate: null,\n\t\t\tremarks: 'Sample Remarks',\n\t\t\tcreatedDate: new Date('2021-01-29 11:48:03').toISOString(),\n\t\t},\n\t],\n};\nchai.request(reimbursementsServer)\n\t.get(`/api/v1/reimbursements/user/${authority}`)\n\t.set('Authorization', jwtEmp || '')\n\t.end((err, res) => {\n\t\tres.should.have.status(401);\n\t\tres.body.should.not.be.eql(data);\n\t\tdone();\n\t});",
                  "err": {},
                  "uuid": "1fc0d9b9-3549-4b88-ab41-1dc2e7ee5eeb",
                  "parentUUID": "81b6d0e8-1ffc-46ce-8522-539087ff7651",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "It should NOT GET user reimbursements when user is unauthorized as finance officer.",
                  "fullTitle": "Reimbursement API Unauthorized User It should NOT GET user reimbursements when user is unauthorized as finance officer.",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const authority = 2;\nconst data = {\n\treimbursements: [\n\t\t{\n\t\t\t_reimbursementId: 1,\n\t\t\temployeeName: 'Kenneth Caro Karamihan',\n\t\t\t_categoryId: 9,\n\t\t\tcategoryName: 'Travel',\n\t\t\tpurpose: 'Sample Purpose 1',\n\t\t\ttotalCost: '1500.50',\n\t\t\tplannedDate: new Date('2021-01-29 12:00:00').toISOString(),\n\t\t\tstatus: 3,\n\t\t\tapprovalDate: new Date('2021-01-29 11:48:37').toISOString(),\n\t\t\trejectionDate: null,\n\t\t\treleaseDate: new Date('2021-01-29 11:52:33').toISOString(),\n\t\t\tremarks: 'Sample Remarks',\n\t\t\tcreatedDate: new Date('2021-01-29 11:45:16').toISOString(),\n\t\t},\n\t],\n};\nchai.request(reimbursementsServer)\n\t.get(`/api/v1/reimbursements/user/${authority}`)\n\t.set('Authorization', jwtEmp || '')\n\t.end((err, res) => {\n\t\tres.should.have.status(401);\n\t\tres.body.should.not.be.eql(data);\n\t\tdone();\n\t});",
                  "err": {},
                  "uuid": "eb7aa374-4c74-4490-a5c7-20ec2781e204",
                  "parentUUID": "81b6d0e8-1ffc-46ce-8522-539087ff7651",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "It should NOT GET user reimbursements when user is unauthorized with invalid authority.",
                  "fullTitle": "Reimbursement API Unauthorized User It should NOT GET user reimbursements when user is unauthorized with invalid authority.",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const authority = 1;\nchai.request(reimbursementsServer)\n\t.get(`/api/v1/reimbursements/user/${authority}`)\n\t.set('Authorization', jwtEmp || '')\n\t.end((err, res) => {\n\t\tres.should.have.status(401);\n\t\tdone();\n\t});",
                  "err": {},
                  "uuid": "5e2b19c5-5b65-4111-bb9e-f488df688235",
                  "parentUUID": "81b6d0e8-1ffc-46ce-8522-539087ff7651",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "It should NOT GET user reimbursement items when user is unauthorized.",
                  "fullTitle": "Reimbursement API Unauthorized User It should NOT GET user reimbursement items when user is unauthorized.",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const _reimbursementId = 1;\nconst data = {\n\trmbItems: [\n\t\t{\n\t\t\t_itemId: 1,\n\t\t\titem: 'Sample Item 1',\n\t\t\tqty: 1,\n\t\t\tcost: '1000.00',\n\t\t},\n\t\t{\n\t\t\t_itemId: 2,\n\t\t\titem: 'Sample Item 2',\n\t\t\tqty: 2,\n\t\t\tcost: '250.25',\n\t\t},\n\t],\n};\nchai.request(reimbursementsServer)\n\t.get(`/api/v1/reimbursements/${_reimbursementId}/items`)\n\t.set('Authorization', jwtEmp || '')\n\t.end((err, res) => {\n\t\tres.should.have.status(401);\n\t\tres.body.should.not.be.eql(data);\n\t\tdone();\n\t});",
                  "err": {},
                  "uuid": "c9bdc1fc-f190-4deb-bf3b-ca346dc4d817",
                  "parentUUID": "81b6d0e8-1ffc-46ce-8522-539087ff7651",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "It should NOT GET user reimbursement receipts when user is unauthorized.",
                  "fullTitle": "Reimbursement API Unauthorized User It should NOT GET user reimbursement receipts when user is unauthorized.",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const _reimbursementId = 1;\nchai.request(reimbursementsServer)\n\t.get(`/api/v1/reimbursements/${_reimbursementId}/receipts`)\n\t.set('Authorization', jwtEmp || '')\n\t.end((err, res) => {\n\t\tres.should.have.status(401);\n\t\tres.body.should.not.have.property('rmbReceipts');\n\t\tdone();\n\t});",
                  "err": {},
                  "uuid": "357c12b9-6321-4ca9-9728-b10cd2bdd47a",
                  "parentUUID": "81b6d0e8-1ffc-46ce-8522-539087ff7651",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "It should NOT GET category list when user is unauthorized.",
                  "fullTitle": "Reimbursement API Unauthorized User It should NOT GET category list when user is unauthorized.",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const data = {\n\trmbCategories: [\n\t\t{\n\t\t\t_categoryId: 1,\n\t\t\tcategoryName: 'Advertising',\n\t\t},\n\t\t{\n\t\t\t_categoryId: 2,\n\t\t\tcategoryName: 'Car & Truck Expenses',\n\t\t},\n\t\t{\n\t\t\t_categoryId: 3,\n\t\t\tcategoryName: 'Contractors',\n\t\t},\n\t\t{\n\t\t\t_categoryId: 4,\n\t\t\tcategoryName: 'Education & Training',\n\t\t},\n\t\t{\n\t\t\t_categoryId: 5,\n\t\t\tcategoryName: 'Employee Benefits',\n\t\t},\n\t\t{\n\t\t\t_categoryId: 6,\n\t\t\tcategoryName: 'Meals & Entertainment',\n\t\t},\n\t\t{\n\t\t\t_categoryId: 7,\n\t\t\tcategoryName: 'Office Expenses & Postage',\n\t\t},\n\t\t{\n\t\t\t_categoryId: 8,\n\t\t\tcategoryName: 'Rent or Lease',\n\t\t},\n\t\t{\n\t\t\t_categoryId: 9,\n\t\t\tcategoryName: 'Travel',\n\t\t},\n\t\t{\n\t\t\t_categoryId: 10,\n\t\t\tcategoryName: 'Utilities',\n\t\t},\n\t],\n};\nchai.request(reimbursementsServer)\n\t.get('/api/v1/reimbursements/categories')\n\t.set('Authorization', jwtEmp || '')\n\t.end((err, res) => {\n\t\tres.should.have.status(401);\n\t\tres.body.should.not.be.eql(data);\n\t\tdone();\n\t});",
                  "err": {},
                  "uuid": "32df5860-f156-4f41-a424-f78558436465",
                  "parentUUID": "81b6d0e8-1ffc-46ce-8522-539087ff7651",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "It should NOT POST new user reimbursement when user is unauthorized.",
                  "fullTitle": "Reimbursement API Unauthorized User It should NOT POST new user reimbursement when user is unauthorized.",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const data = {\n\tnewReimbursement: {\n\t\t_categoryId: 9,\n\t\tpurpose: 'Fetch AWS Laptop',\n\t\ttotalCost: '1300.00',\n\t\tplannedDate: '2021-04-26 04:00:00',\n\t\tremarks: '行ってきます',\n\t},\n\tnewItems: [\n\t\t{\n\t\t\titem: 'Gas',\n\t\t\tqty: 1,\n\t\t\tcost: '1000.00',\n\t\t},\n\t\t{\n\t\t\titem: 'Toll Fee',\n\t\t\tqty: 2,\n\t\t\tcost: '150.00',\n\t\t},\n\t],\n};\nconst gas = fs.readFileSync(path.join(__dirname, 'img', 'Gas Receipt.jpg'));\nconst toll = fs.readFileSync(path.join(__dirname, 'img', 'Toll Receipt.jpg'));\nchai.request(reimbursementsServer)\n\t.post('/api/v1/reimbursements/new')\n\t.set('Authorization', jwtEmp || '')\n\t.field('Content-Type', 'multipart/form-data')\n\t.field('data', JSON.stringify(data))\n\t.attach('files', gas, 'Gas Receipt.jpg')\n\t.attach('files', toll, 'Toll Receipt.jpg')\n\t.end((err, res) => {\n\t\tres.should.have.status(401);\n\t\tdone();\n\t});",
                  "err": {},
                  "uuid": "39cb0c7a-25fc-4d07-bc68-9ab85c912e3c",
                  "parentUUID": "81b6d0e8-1ffc-46ce-8522-539087ff7651",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "It should NOT PUT user reimbursement when user is unauthorized.",
                  "fullTitle": "Reimbursement API Unauthorized User It should NOT PUT user reimbursement when user is unauthorized.",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const _reimbursementId = 4;\nconst data = {\n\tupdatedReimbursement: {\n\t\t_categoryId: 6,\n\t\tpurpose: 'Lunch Meeting',\n\t\ttotalCost: '450.75',\n\t\tplannedDate: '2021-04-25 04:00:00',\n\t\tremarks: '食べましょう',\n\t},\n\tupdatedItems: [\n\t\t{\n\t\t\t_itemId: 6,\n\t\t\titem: 'Food',\n\t\t\tqty: 3,\n\t\t\tcost: '100.00',\n\t\t\tisNew: 0,\n\t\t\tisRemove: 0,\n\t\t},\n\t\t{\n\t\t\t_itemId: 7,\n\t\t\titem: 'Toll Fee',\n\t\t\tqty: 2,\n\t\t\tcost: '150.00',\n\t\t\tisNew: 0,\n\t\t\tisRemove: 1,\n\t\t},\n\t\t{\n\t\t\titem: 'Drinks',\n\t\t\tqty: 2,\n\t\t\tcost: '50.25',\n\t\t\tisNew: 1,\n\t\t\tisRemove: 0,\n\t\t},\n\t],\n\tdeletedReceipts: [5, 6],\n};\nconst food = fs.readFileSync(path.join(__dirname, 'img', 'Food Receipt.jpg'));\nconst rent = fs.readFileSync(path.join(__dirname, 'img', 'Drinks Receipt.jpg'));\nchai.request(reimbursementsServer)\n\t.put(`/api/v1/reimbursements/${_reimbursementId}`)\n\t.set('Authorization', jwtEmp || '')\n\t.field('Content-Type', 'multipart/form-data')\n\t.field('data', JSON.stringify(data))\n\t.attach('files', food, 'Food Receipt.jpg')\n\t.attach('files', rent, 'Rent Receipt.jpg')\n\t.end((err, res) => {\n\t\tres.should.have.status(401);\n\t\tdone();\n\t});",
                  "err": {},
                  "uuid": "da610992-261b-4149-9e70-56c53d4a571a",
                  "parentUUID": "81b6d0e8-1ffc-46ce-8522-539087ff7651",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "It should NOT DELETE selected user reimbursement item when user is unauthorized.",
                  "fullTitle": "Reimbursement API Unauthorized User It should NOT DELETE selected user reimbursement item when user is unauthorized.",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const _reimbursementId = 4;\nconst _itemId = 6;\nchai.request(reimbursementsServer)\n\t.delete(`/api/v1/reimbursements/${_reimbursementId}/items/${_itemId}`)\n\t.set('Authorization', jwtEmp || '')\n\t.end((err, res) => {\n\t\tres.should.have.status(401);\n\t\tdone();\n\t});",
                  "err": {},
                  "uuid": "a04b2797-b51f-4ab7-ace1-fa8c07a40850",
                  "parentUUID": "81b6d0e8-1ffc-46ce-8522-539087ff7651",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "It should NOT DELETE selected user reimbursement receipts when user is unauthorized.",
                  "fullTitle": "Reimbursement API Unauthorized User It should NOT DELETE selected user reimbursement receipts when user is unauthorized.",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const _reimbursementId = 4;\nconst _receiptId = 7;\nchai.request(reimbursementsServer)\n\t.delete(`/api/v1/reimbursements/${_reimbursementId}/receipts/${_receiptId}`)\n\t.set('Authorization', jwtEmp || '')\n\t.end((err, res) => {\n\t\tres.should.have.status(401);\n\t\tdone();\n\t});",
                  "err": {},
                  "uuid": "7c897f80-82af-48cf-8e1e-b69a3ab22f33",
                  "parentUUID": "81b6d0e8-1ffc-46ce-8522-539087ff7651",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "It should NOT DELETE selected user reimbursement for cancellation when user is unauthorized.",
                  "fullTitle": "Reimbursement API Unauthorized User It should NOT DELETE selected user reimbursement for cancellation when user is unauthorized.",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const _reimbursementId = 4;\nchai.request(reimbursementsServer)\n\t.delete(`/api/v1/reimbursements/${_reimbursementId}`)\n\t.set('Authorization', jwtEmp || '')\n\t.end((err, res) => {\n\t\tres.should.have.status(401);\n\t\tdone();\n\t});",
                  "err": {},
                  "uuid": "96bae581-4ef4-472c-91a6-4f91ac42a39e",
                  "parentUUID": "81b6d0e8-1ffc-46ce-8522-539087ff7651",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "It should NOT PUT selected user reimbursement's status to approved when user is unauthorized.",
                  "fullTitle": "Reimbursement API Unauthorized User It should NOT PUT selected user reimbursement's status to approved when user is unauthorized.",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const _reimbursementId = 3;\nconst statusFlag = 2;\nconst data = {\n\tremarks: 'Sample Remarks Approved',\n};\nchai.request(reimbursementsServer)\n\t.put(`/api/v1/reimbursements/${_reimbursementId}/status/${statusFlag}`)\n\t.set('Authorization', jwtEmp || '')\n\t.send(data)\n\t.end((err, res) => {\n\t\tres.should.have.status(401);\n\t\tdone();\n\t});",
                  "err": {},
                  "uuid": "9a675eb3-760b-40de-9ab1-ee195d788b3a",
                  "parentUUID": "81b6d0e8-1ffc-46ce-8522-539087ff7651",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "It should NOT PUT selected user reimbursement's status to rejected when user is unauthorized.",
                  "fullTitle": "Reimbursement API Unauthorized User It should NOT PUT selected user reimbursement's status to rejected when user is unauthorized.",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const _reimbursementId = 3;\nconst statusFlag = 0;\nconst data = {\n\tremarks: 'Sample Remarks Rejected',\n};\nchai.request(reimbursementsServer)\n\t.put(`/api/v1/reimbursements/${_reimbursementId}/status/${statusFlag}`)\n\t.set('Authorization', jwtEmp || '')\n\t.send(data)\n\t.end((err, res) => {\n\t\tres.should.have.status(401);\n\t\tdone();\n\t});",
                  "err": {},
                  "uuid": "9616be28-d7d7-4b83-ba50-3d7e5acb1f86",
                  "parentUUID": "81b6d0e8-1ffc-46ce-8522-539087ff7651",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "It should NOT PUT selected user reimbursement's status to released when user is unauthorized.",
                  "fullTitle": "Reimbursement API Unauthorized User It should NOT PUT selected user reimbursement's status to released when user is unauthorized.",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const _reimbursementId = 3;\nconst statusFlag = 3;\nconst data = {\n\tremarks: 'Sample Remarks Released',\n};\nchai.request(reimbursementsServer)\n\t.put(`/api/v1/reimbursements/${_reimbursementId}/status/${statusFlag}`)\n\t.set('Authorization', jwtEmp || '')\n\t.send(data)\n\t.end((err, res) => {\n\t\tres.should.have.status(401);\n\t\tdone();\n\t});",
                  "err": {},
                  "uuid": "5931eff6-a7f1-4728-a34d-8bc7543d1949",
                  "parentUUID": "81b6d0e8-1ffc-46ce-8522-539087ff7651",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "560b5d68-d297-49f7-9055-b0c17696e82d",
                "1fc0d9b9-3549-4b88-ab41-1dc2e7ee5eeb",
                "eb7aa374-4c74-4490-a5c7-20ec2781e204",
                "5e2b19c5-5b65-4111-bb9e-f488df688235",
                "c9bdc1fc-f190-4deb-bf3b-ca346dc4d817",
                "357c12b9-6321-4ca9-9728-b10cd2bdd47a",
                "32df5860-f156-4f41-a424-f78558436465",
                "39cb0c7a-25fc-4d07-bc68-9ab85c912e3c",
                "da610992-261b-4149-9e70-56c53d4a571a",
                "a04b2797-b51f-4ab7-ace1-fa8c07a40850",
                "7c897f80-82af-48cf-8e1e-b69a3ab22f33",
                "96bae581-4ef4-472c-91a6-4f91ac42a39e",
                "9a675eb3-760b-40de-9ab1-ee195d788b3a",
                "9616be28-d7d7-4b83-ba50-3d7e5acb1f86",
                "5931eff6-a7f1-4728-a34d-8bc7543d1949"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 56,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "8.2.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "6.2.1"
    },
    "marge": {
      "options": null,
      "version": "5.1.0"
    }
  }
}